# This is a basic workflow to help you get started with Actions

name: CI

# Controls when the workflow will run
on:
  # Triggers the workflow on push or pull request events but only for the "main" branch
  push:
    branches: [ "main" ]
  pull_request:
    branches: [ "main" ]

  # Allows you to run this workflow manually from the Actions tab
  workflow_dispatch:
    inputs:
      environment:
        description: 'ENV'
        required: true
        default: 'myenv'
        type: string

env:
  DAY_OF_WEEK: Monday

# A workflow run is made up of one or more jobs that can run sequentially or in parallel
jobs:
  # This workflow contains a single job called "build"
  build:
    # The type of runner that the job will run on
    runs-on: ubuntu-latest
    outputs:
      output1: ${{ steps.random-number-generator.outputs.randomid }}
    env:
      myjobenv1: myjobenv1

    # Steps represent a sequence of tasks that will be executed as part of the job
    steps:
      # Checks-out your repository under $GITHUB_WORKSPACE, so your job can access it
      - uses: actions/checkout@v4

      # Runs a single command using the runners shell
      - name: Run a one-line script
        run: echo Hello, world!
      
      - name: Get current config
        run: |
          pwd
          ls

      # Runs a set of commands using the runners shell
      - name: Run a multi-line script
        run: |
          echo Add other actions to build,
          echo test, and deploy your project.
      - name: Output Inputs
        run: echo "${{ toJSON(github.event.inputs) }}"
      - id: random-number-generator
        run: |
          echo "randomid=$(echo $RANDOM)" >> $GITHUB_OUTPUT
          echo "randomidenv=$(echo $RANDOM)" >> $GITHUB_ENV
        shell: bash
      - name: Check GITHUB_OUTPUT FILE
        run: |
          echo $GITHUB_OUTPUT
          cat $GITHUB_OUTPUT
      - name: Print all env vars
        run: |
          printenv
      - name: Test
        run: |
          echo $randomidenv
          echo "here: ${{ steps.random-number-generator.outputs.randomid }}"
          # exit 1

  build2:
    # The type of runner that the job will run on
    runs-on: ubuntu-latest
    needs: build
    env:
      myjobenv: myjobenv

    # Steps represent a sequence of tasks that will be executed as part of the job
    steps:
      # Checks-out your repository under $GITHUB_WORKSPACE, so your job can access it
      - env:
          OUTPUT1: ${{needs.build.outputs.output1}}
        run: |
          echo "$OUTPUT1"
      - uses: actions/checkout@v4
      - name: Output Inputs
        run: echo "${{ toJSON(github.event.inputs) }}"
      - name: Check GITHUB_OUTPUT FILE
        run: |
          echo $GITHUB_OUTPUT
          cat $GITHUB_ENV
          echo $randomidenv
          echo $mystepenv
          echo $myjobenv
        env:
          mystepenv: mystepenv
      - id: set-multi-line-output
        name: Set multi line output
        run: |
          echo 'multi_line<<EOF' >> $GITHUB_ENV
          echo '' >> $GITHUB_ENV
          echo 'multi' >> $GITHUB_ENV
          echo 'line' >> $GITHUB_ENV
          echo 'EOF' >> $GITHUB_ENV
      - name: Print all env vars
        run: |
          printenv
      - name: Use multi-line output
        run: |
          echo "Multi-line output:"
          echo "${{ env.multi_line }}"
          echo "::debug::hello"
      - name: Install lsb-release
        run: apt-get -qq update && apt-get -qq install -y lsb-release
      - name: Run lsb_release -a
        run: |
          cat /etc/debian_version
          lsb_release -a
          
  build3: # job = vm of flavor <runs-on>. container enables the job (and therefore all its steps) to run within <container>.
    needs: build2
    name: Build on ${{matrix.container }}
    runs-on: ubuntu-latest
    container: ${{ matrix.container }}
    strategy:
      matrix:
        container: ['ubuntu:16.04', 'ubuntu:18.04']
    steps:
      - name: Install lsb-release
        run: apt-get -qq update && apt-get -qq install -y lsb-release
  
      - name: Run lsb_release -a
        run: |
          cat /etc/debian_version
          lsb_release -a